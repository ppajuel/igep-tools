#!/bin/sh
# igep-flash - Flash the firmware to the OneNAND/NAND
#
# Copyright 2012 - ISEE 2007 SL
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# 'igep-flash' is a tool that helps users flash images to the board. Invoking
# it without any arguments will display help screens for 'igep-flash' command.
# Please use that interface for detailed help.
#
# AUTHORS
# Enric Balletbo i Serra <eballetbo [at] gmail.com>
#
# TODO
#   - Do not run the script when the rootfs is in flash.
#   - Add suppport for IGEP0032 machine.

set -e

# include e-functions
if [ -f ./e-functions ]; then
	. ./e-functions
elif [ -f /lib/igep-tools/e-functions ]; then
    . /lib/igep-tools/e-functions
else
	echo "Error: e-functions not found."
	exit 1
fi

# The revision number is imported from e-functions file
__VERSION__="1.${__REVISION__}"

unset IMAGE_FILE MACHINE

# Environment
DIR=$PWD
TMPDIR="$PWD/tmp-workdir"

MACHINE=$(cat /proc/cpuinfo | grep Hardware | awk '{print tolower($3);}')
# In the case of device-tree based kernel, set the machine variable correctly
if [ $MACHINE = "generic" ]; then
	MACHINE=$(cat /proc/cpuinfo | grep Hardware | awk '{print tolower($4);}')
fi

SKIP_NANDTEST="false"

success() {
	echo "Successfully written firmware to flash"
	if [ $MACHINE = "igep0020" ]; then
		echo 0 > /sys/class/leds/d240\:red/brightness
		echo heartbeat > /sys/class/leds/d240\:green/trigger
	fi
	if [ $MACHINE = "igep0030" ]; then
		echo 0 > /sys/class/leds/d210\:red/brightness
		echo heartbeat > /sys/class/leds/d210\:green/trigger
	fi
	if [ $MACHINE = "am33xx" ]; then
		echo 0 > /sys/class/leds/base\:red\:user/brightness
		echo heartbeat > /sys/class/leds/base\:green\:user/trigger
	fi
}

failed() {
	echo "Error: Flash script failed with error - $1"
	if [ $MACHINE = "igep0020" ]; then
		echo 0 > /sys/class/leds/d240\:green/brightness
	fi
	if [ $MACHINE = "igep0030" ]; then
		echo 0 > /sys/class/leds/d210\:green/brightness
		echo 1 > /sys/class/leds/d210\:red/brightness
	fi
	if [ $MACHINE = "am33xx" }; then
		echo 0 > /sys/class/leds/base\:green\:user/brightness
		echo heartbeat > /sys/class/leds/base\:red\:user/trigger
	fi
	exit 1
}

checkparm() {
    if [ "$(echo $1|grep ^'\-')" ];then
        echo "Error: Need an argument"
        usage
    fi
}

ensure_command() {
	# ensure_command foo
	which "$1" 2>/dev/null 1>/dev/null || ( failed "Install required command $1, aborting." )
}

ensure_file() {
	# ensure file exists
	[ -f $1 ] || ( failed "File $1 not exists, aborting." )
}

prepare() {
	if [ $MACHINE = "igep0020" ]; then
		echo 1 > /sys/class/leds/d240\:green/brightness
		echo 1 > /sys/class/leds/d240\:red/brightness
	fi
	if [ $MACHINE = "igep0030" ]; then
		echo 1 > /sys/class/leds/d210\:green/brightness
		echo 1 > /sys/class/leds/d210\:red/brightness
	fi
	if [ $MACHINE = "am33xx" ]; then
		echo 1 > /sys/class/leds/base\:red\:user/brightness
		echo 1 > /sys/class/leds/base\:green\:user/brightness
	fi
}

# cleanup previous environment if exist
cleanup_workdir() {
	case "$MACHINE" in
		"igep0020"| "igep0030" )
			for mtd in mtdblock1 mtdblock2 ; do
				umount  ${TMPDIR}/${mtd} || true
			done
			;;
		"igep0033" )
			umount ${TMPDIR}/ubifs > /dev/null || true
			ubidetach -p /dev/mtd3 > /dev/null || true
			;;
	esac

	rm -fr ${TMPDIR} || true
}

# mark bad blocks
mark_bad_blocks() {
	MTDPARTS="0 1 2"
	if [ $MACHINE = "am33xx" ]; then
		MTDPARTS="0 1 2 3"
	fi
	for i in 0 1 2; do
		nandtest -m /dev/mtd${i} || failed "checking for bad blocks"
	done
}

# write image to the flash device
flash_image() {
	# erase partitions
	for i in 0 1 2; do
		flash_erase /dev/mtd${i} 0 0 || failed "erasing partitions"
	done

	for mtd in mtdblock1 mtdblock2 ; do
		mkdir -p ${TMPDIR}/${mtd}
		mount -t jffs2 -o sync /dev/${mtd} ${TMPDIR}/${mtd}
		if [ $? != 0 ]; then
			failed "mounting /dev/${mtd} to ${TMPDIR}/${mtd}"
		fi
	done

	echo ""
	echo "Writing image to the flash  "
	echo "Be patient, this may take a few minutes"
	echo ""
	# first uncompress the image file to the second partition
	tar -jxf ${IMAGE_FILE} -C ${TMPDIR}/mtdblock2
	# then, copy kernel image from second partition to the first partition
	cp ${TMPDIR}/mtdblock2/boot/zImage ${TMPDIR}/mtdblock1
	# now, create the INI file
	create_ini jffs2 ${TMPDIR}/mtdblock1
	if [ $? != 0 ]; then
		failed "create_init function failed with error $?"
	fi
	# finally write the bootloader to mtd0
	writeloader -i ${TMPDIR}/mtdblock2/boot/MLO -o /dev/mtd0
	if [ $? != 0 ]; then
		failed "writting the bootloader with error $?"
	fi

	sync
}

# write ubi image to the flash device
flash_ubi_image() {
	# erase partitions
	for i in 0 1 2 3; do
		flash_erase /dev/mtd${i} 0 0 || failed "erasing partitions"
	done

	# create working dir if doesn't exists
	mkdir -p ${TMPDIR}/ubifs

	# start flashing

	# If NAND flash supports sub-pages, UBI will use them. But sometimes you
	# may want to ask UBI to ignore sub-pages, On AM335x looks like there is
	# a problem handling sub-pages, for that reason we Force UBI to ignore
	# sub-pages with (--vid-hdr-offset 2048)
	# ubiformat -O 2048 /dev/mtd3
	ubiattach --vid-hdr-offset 2048 -p /dev/mtd3
	# set volume size to maximum available size
	ubimkvol /dev/ubi0 -N filesystem -m
	mount -t ubifs ubi0:filesystem ${TMPDIR}/ubifs
	if [ $? != 0 ]; then
		failed "mounting /dev/mtd3 to ${TMPDIR}/ubifs"
	fi

	echo ""
	echo "Writing image to the flash  "
	echo "Be patient, this may take a few minutes"
	echo ""
	# first uncompress the image to the File System partition
	tar -jxf ${IMAGE_FILE} -C ${TMPDIR}/ubifs
	if [ $? != 0 ]; then
		failed "Uncompressing the image with error $?"
	fi

	# then, copy uboot
	nandwrite -p /dev/mtd1 ${TMPDIR}/ubifs/boot/u-boot.img
	if [ $? != 0 ]; then
		failed "writting u-boot.img with error $?"
	fi
	# remove U-Boot binaries from filesystem to avoid confusion
	rm -f ${TMPDIR}/ubifs/u-boot*

	# and finally, the spl. Note that the ROM boot is able to found the
	# bootloader in the first four blocks.
	for offset in 0x0 0x20000 0x40000 0x60000; do
		nandwrite -p -s ${offset} /dev/mtd0 ${TMPDIR}/ubifs/boot/MLO
		if [ $? != 0 ]; then
			failed "writting MLO at offset ${offset} with error $?"
		fi
	done
	# remove SPL binaries from filesystem to avoid confusion
	rm -f ${TMPDIR}/ubifs/MLO*

	# sync, umount and detach ...
	sync
	umount ${TMPDIR}/ubifs
	if [ $? != 0 ]; then
		failed "umounting ubifs with error $?"
	fi

	ubidetach -p /dev/mtd3
	if [ $? != 0 ]; then
		failed "detaching /dev/mtd3 with error $?"
	fi
}

# Usage help
usage() {
    echo "usage: $(basename $0) --image <filename>"
cat <<EOF

required options:

--image <filename>
    specify file used to write to the flash device.

Additional/Optional options:
-h --help
    this help

--skip-nandtest
    skip mark blocks bad if they appear so

EOF
exit
}

version() {
	echo "$(basename $0) ${__VERSION__}"
cat << EOF

Copyright (C) 2012 - ISEE 2007 SL
License GPLv2: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
EOF
exit
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
# These packages are required
ensure_command flash_erase
ensure_command nandtest
ensure_command mount
ensure_command umount
ensure_command tar
# The following commands are only required for OMAP3-based Processor Boards.
if [ $MACHINE = "igep0020" ] || [ $MACHINE = "igep0030" ]; then
	ensure_command writeloader
fi

# parse commandline options
while [ ! -z "$1" ]; do
	case $1 in
		-h|--help)
			usage
			;;
		-v|--version)
			version
			;;
		--image)
			checkparm $2
			IMAGE_FILE="$2"
			;;
		--skip-nandtest)
			SKIP_NANDTEST="true"
			;;
	esac
	shift
done

# ensure required parameters exists
if [ ! "${IMAGE_FILE}" ]; then
	usage
fi

# Start flashing new firmware
prepare
cleanup_workdir

# Ensure file image exists
ensure_file ${IMAGE_FILE}

if [ "$SKIP_NANDTEST" = "false" ]; then
	echo ""
	echo "Mark blocks bad if they appear so "
	echo ""
	mark_bad_blocks
fi

if [ $MACHINE = "am33xx" ]; then
	# Flash u-boot + ubi filesystem image.
	flash_ubi_image
else
	# Flash image based on IGEP bootloader.
	flash_image
fi

# Remove temporary directories
cleanup_workdir
# That's all folks ...
success

exit 0
