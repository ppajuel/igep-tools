#!/bin/sh
# igep-media-create - Automatically create a bootable SD cards or HD from images
#
# Copyright (C) 2016 - ISEE 2007 SL
#
# Based on linaro-media-script by
#   Copyright 2010 Robert Nelson <robertcnelson@gmail.com>
#   Copyright 2010 Linaro
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# 'igep-media-create' is a tool that helps users create a new bootable SD cards
# or HD images.  Invoking it without any arguments will display help screens for
# the 'igep-media-create' command. Please use that interface for detailed help.
#
# AUTHORS
# Enric Balletbo i Serra <eballetbo [at] gmail.com>
# Pau Pajuelo Llagostera <ppajuelo [at] iseebcn.com>
#
# TODO
#   - do not run the script when the rootfs is in mmc.
#   - create SD card downloading latest images (--download)

set -e

# include e-functions
if [ -f e-functions ]; then
	. ./e-functions
elif [ -f /lib/igep-tools/e-functions ]; then
    . /lib/igep-tools/e-functions
else
	echo "Error: igep-tools-functions not found."
	exit 1
fi

# The revision number is imported from e-functions file
__VERSION__="1.${__REVISION__}"

unset MMC MMC1 MMC2 MMC3 IMAGE_FILE MACHINE BUDDY

ensure_command() {
	# ensure_command foo foo-package
	which "$1" 2>/dev/null 1>/dev/null || (
		echo "Install required command $1 from package $2, e.g. sudo apt-get install $2"
		exit 1
	)
}

# Defaults
RFS=ext3
ASSUME_YES="false"
IMAGE_TYPE="yocto"
BOOTLOADER_TYPE=""
# Partition labels
BOOT_LABEL=boot
RFS_LABEL=rootfs
DATA_LABEL=data

RFS_UUID=`uuidgen -r`
HEADS=255
SECTORS=63
SECTORSIZE=512
CYLINDER_ARG=""

# Environment
DIR=$PWD
TMPDIR="$PWD/tmp-workdir"
SKIP_FLASHIMAGE="false"
SKIP_CREATEINI="false"
CP_UENV="false"

# These commands are required
ensure_command uuidgen uuid-runtime
ensure_command parted parted
ensure_command sfdisk util-linux
ensure_command fdisk util-linux
ensure_command wget wget
ensure_command mkfs.${RFS} e2fsprogs
ensure_command mkfs.vfat dosfstools
ensure_command realpath realpath

wait_for_partitions_to_appear() {
	for device in /dev/disk/by-id/*; do
		if [ `realpath $device` = $MMC ]; then
			if echo "$device" | grep -q -- "-part[0-9]*$"; then
				echo "device $MMC must not be a partition part ($device)" 1>&2
				exit 1
			fi

			if [ ! -e ${device}-part1 ]; then
				echo -n "Waiting for partitions to appear."

				while [ ! -e ${device}-part1 ]
				do
					sleep 1
					echo -n "."
				done
				echo " done"
			fi
		fi
	done
}

get_mmcs_by_id() {
	unset MMC1 MMC2 MMC3

	for device in /dev/disk/by-id/*; do
		if [ `realpath $device` = $MMC ]; then
			if echo "$device" | grep -q -- "-part[0-9]*$"; then
				echo "device $MMC must not be a partition part ($device)" 1>&2
				exit 1
			fi
		for part_id in `ls "$device-part"*`; do
			part=`realpath $part_id`
			part_no=`echo $part_id | sed -e 's/.*-part//g'`
			# echo "part $part_no found: $part_id" 1>&2
			if test "$part_no" = 1; then
				MMC1=$part
			elif test "$part_no" = 2; then
				MMC2=$part
			elif test "$part_no" = 3; then
				MMC3=$part
			fi
		done
		break
		fi
	done
}

cleanup_sd() {
	echo ""
	echo "Umounting Partitions"
	echo ""

	for mmc in $MMC1 $MMC2 $MMC3; do
		if test -n "$mmc"; then
			sudo umount ${mmc} >/dev/null 2>&1|| true
		fi
	done

	if [ "${MMC}" ]; then
		sudo parted -s ${MMC} mklabel msdos
	fi
}

create_partitions() {
	case "$IMAGE_TYPE" in
	yocto)
		case "$MACHINE" in
		"igep0020" | "igep0030" | "igep0032" | "igepam335x")
			# Create a VFAT partition of 9 cylinders which is about 64M
			# and a linux partition of the rest
			SFDISKVERSION="$(sfdisk --version | tr -d [:alpha:][:blank:][:cntrl:][:punct:][:space:])"
			# Since version 2.26 (2260) sfdisk does not provide the --DOS, --IBM, --DOS-extended, --unhide,
			# --show-extended, --cylinders, --heads, --sectors, --inside-outer, --not-inside-outer options.
			if [ "$SFDISKVERSION" -lt "2260" ]
			then
				sudo sfdisk -D -H $HEADS -S $SECTORS $CYLINDER_ARG $MMC << THEEND
,9,0x0C,*
,,,-
THEEND
			else
				sudo sfdisk $MMC <<EOF

label: dos

63,144522,0x0C,*
144585,,,-
EOF
			fi
		;;
		"igep0046")
			# Create a non partitioned area of 1 cylinder
			# Create a VFAT partition of 8 cylinders which is about 57M
			# and a linux partition of the rest
			SFDISKVERSION="$(sfdisk --version | tr -d [:alpha:][:blank:][:cntrl:][:punct:][:space:])"
			# Since version 2.26 (2260) sfdisk does not provide the --DOS, --IBM, --DOS-extended, --unhide,
			# --show-extended, --cylinders, --heads, --sectors, --inside-outer, --not-inside-outer options.
			if [ "$SFDISKVERSION" -lt "2260" ]
			then
				sudo sfdisk -D -H $HEADS -S $SECTORS $CYLINDER_ARG $MMC << THEEND
1,8,0x0C,*
9,,,-
THEEND
			else
				sudo sfdisk $MMC <<EOF

label: dos

16065,128520,0x0C,*
144585,,,-
EOF
			fi
		;;
		esac
	;;
	android)
		case "$MACHINE" in
		"igep0020" | "igep0030" | "igep0032" )
			# Create a VFAT partition of 9 cylinders which is about 64M,
			# a linux partition of 90 cylinders which is about 640M
			# and a VFAT partition for the rest
			SFDISKVERSION="$(sfdisk --version | tr -d [:alpha:][:blank:][:cntrl:][:punct:][:space:])"
			# Since version 2.26 (2260) sfdisk does not provide the --DOS, --IBM, --DOS-extended, --unhide,
			# --show-extended, --cylinders, --heads, --sectors, --inside-outer, --not-inside-outer options.
			if [ "$SFDISKVERSION" -lt "2260" ]
			then
				sudo sfdisk -D -H $HEADS -S $SECTORS $CYLINDER_ARG $MMC << THEEND
,9,0x0C,*
,90,,-
,,0x0C,-
THEEND
			else
				sudo sfdisk $MMC <<EOF

label: dos

63,144522,0x0C,*
144585,1445850,,-
1590435,,0x0C,-
EOF
			fi
		;;
		*)
			echo "Error: $MACHINE doesn't support Android OS officially"
			exit 1
		;;
		esac
	;;
	esac
}

# Prepare sdcard partitions
prepare_partitions() {
	echo ""
	echo "Umounting Partitions"
	echo ""

	# It looks like somehow automounts the partitions after we
	# repartition a disk so we need to unmount them here to create the
	# filesystem. As a HACK in some systems a small delay is required, we 
	# should investigate a little more about this issue.
	sleep 3
	for mmc in $MMC1 $MMC2 $MMC3; do
		if test -n "$mmc"; then
			sudo umount ${mmc} >/dev/null 2>&1 || true
		fi
	done

	echo ""
	echo "Formating ${BOOT_LABEL} Partition"
	echo ""
	sudo mkfs.vfat -F 32 ${MMC1} -n ${BOOT_LABEL}

	echo ""
	echo "Formating ${RFS} Partition"
	echo ""
	sudo mkfs.${RFS} -U "$RFS_UUID" ${MMC2} -L ${RFS_LABEL}

	if test "-$IMAGE_TYPE-" = "-android-"; then
		echo ""
		echo "Formating Data Partition"
		echo ""
		sudo mkfs.vfat -F 32 ${MMC3} -n ${DATA_LABEL}
	fi
}

# Populate boot files to the bootfs partition
populate_boot() {
	echo ""
	echo "Populating Boot Partition"
	echo "Be patient, this may take a few minutes"
	echo ""

	# Create TMP folder and mount it Boot partition
	mkdir -p ${TMPDIR}/disk || true
	sudo mount ${MMC1} ${TMPDIR}/disk

	case "$MACHINE" in
	"igep0020" | "igep0030" | "igep0032" | "igepam335x")
		# Copy IGEP-X-Loader or U-boot SPL
		sudo cp -f ${TMPDIR}/binary/MLO ${TMPDIR}/disk/

		if [ "$BOOTLOADER_TYPE" = "uboot" ]; then
			# Copy U-boot.img
			sudo cp -f ${TMPDIR}/binary/u-boot.img ${TMPDIR}/disk/

			if [ "$CP_UENV" = "true" ] && [ "$MACHINE" = "igepam335x" ]; then
				# Copy uEnv.txt
				sudo cp -f ${TMPDIR}/binary/uEnv.txt ${TMPDIR}/disk/
				if [ $? != 0 ]; then
					echo "Error: copy uEnv.txt file failed with error $?"
					exit 1
				fi
			fi
		else
			# Copy zImage
			sudo cp -f ${TMPDIR}/binary/zImage ${TMPDIR}/disk/
			if [ "$SKIP_CREATEINI" = "false" ]; then
				# create INI file based on script arguments
				create_ini mmc ${TMPDIR}/disk/
				if [ $? != 0 ]; then
					echo "Error: create_init function failed with error $?"
					exit 1
				fi
			else
				# Copy igep.ini
				sudo cp -f ${TMPDIR}/binary/igep.ini ${TMPDIR}/disk/
				if [ $? != 0 ]; then
					echo "Error: copy igep.ini file failed with error $?"
					exit 1
				fi
			fi
		fi
	;;
	"igep0046")
		# Copy U-boot.imx (RAW mode) at firsts sectors
		sudo dd if=${TMPDIR}/binary/u-boot.imx of=${MMC} bs=512  seek=2 2> /dev/null
		# Copy zImage
		sudo cp -f ${TMPDIR}/binary/zImage ${TMPDIR}/disk/
		# Copy Device Trees
		sudo cp -f ${TMPDIR}/binary/imx6*.dtb ${TMPDIR}/disk/
	;;
	esac

	# cleanup
	sync
	sudo umount ${TMPDIR}/disk || true
	sudo rm -fr ${TMPDIR}/disk
}

# Populate the rootfs image to the rootfs partition
populate_rootfs() {
	echo ""
	echo "Populating rootfs Partition"
	echo "Be patient, this may take a few minutes"
	echo ""

	# Create temporary folder and mount it rootfs partition
	# Prepare partition to put image into firmware directory
	mkdir -p ${TMPDIR}/disk || true
	mkdir -p ${TMPDIR}/binary || true
	sudo mount ${MMC2} ${TMPDIR}/disk
	# uncompress the rootfs
	sudo tar -xf ${IMAGE_FILE} -C ${TMPDIR}/disk/

	case "$MACHINE" in
	"igep0020" | "igep0030" | "igep0032" | "igepam335x")
		# get IGEP-X-Loader or U-boot SPL from rootfs
		sudo cp -pL ${TMPDIR}/disk/boot/MLO ${TMPDIR}/binary/
		# get zImage from rootfs
		sudo cp -pL ${TMPDIR}/disk/boot/zImage ${TMPDIR}/binary/
		if [ "$SKIP_CREATEINI" = "true" ]; then
			# get igep.ini from rootfs
			sudo cp -pL ${TMPDIR}/disk/boot/igep.ini ${TMPDIR}/binary/
		fi

		if [ "$CP_UENV" = "true" ]; then
			if [ "$MACHINE" = "igepam335x" ]; then
				# get uEnv.txt from rootfs
				sudo cp -pL ${TMPDIR}/disk/boot/uEnv.txt ${TMPDIR}/binary/
			else
				echo "--cp-uenv option not supported at $MACHINE machine. Skipped"
			fi
		fi

		if [ "$BOOTLOADER_TYPE" = "uboot" ]; then
			# get U-boot.img from rootfs
			cp -pL ${TMPDIR}/disk/boot/u-boot.img ${TMPDIR}/binary/
		fi
	;;
	"igep0046")
		# get zImage from rootfs
		sudo cp -pL ${TMPDIR}/disk/boot/zImage ${TMPDIR}/binary/
		# get U-boot.imx from rootfs
		sudo cp -pL ${TMPDIR}/disk/boot/u-boot.imx ${TMPDIR}/binary/
		# get Device Trees from rootfs
		sudo cp -f ${TMPDIR}/disk/boot/imx6*.dtb ${TMPDIR}/binary/
	;;
	esac

	if [ "$SKIP_FLASHIMAGE" = "false" ]; then
		# put the image into firmware directory, useful for flash current image
		sudo mkdir -p ${TMPDIR}/disk/opt/firmware
		sudo cp -pL ${IMAGE_FILE} ${TMPDIR}/disk/opt/firmware
		if [ -f ${DIR}/README ]; then
			sudo cp ${DIR}/README ${TMPDIR}/disk/opt/firmware
		else
			echo ""
			echo "Note: README file not found, seems you're running this script outside firmware directory."
			echo "      The readme file is not being copied to the /opt/firmware."
			echo ""
		fi
		if [ -f ${TMPDIR}/disk/etc/issue ]; then
			# create a link to the firmware version
			sudo ln -snf ../../etc/issue ${TMPDIR}/disk/opt/firmware/VERSION
		else
			echo ""
			echo "Note: ISSUE file not found, seems you're using non-standard root file system."
			echo "      The VERSION file is not being created to the /opt/firmware."
			echo ""
		fi
	fi
	# cleanup
	sync
	sudo umount ${TMPDIR}/disk || true
	sudo rm -fr ${TMPDIR}/disk
}

checkparm() {
    if [ "$(echo $1|grep ^'\-')" ];then
        echo "Error: Need an argument"
        usage
    fi
}

check_mmc() {
	FDISK=$(sudo LC_ALL=C sfdisk -l | grep "[Disk] ${MMC}" | awk '{print $2}')

	if test "-$FDISK-" = "-$MMC:-"; then
		echo ""
		echo "I see..."
		echo "sudo sfdisk -l:"
		sudo LC_ALL=C sfdisk -l | grep "[Disk] /dev/" --color=never
		echo ""
		echo "mount:"
 		mount | grep -v none | grep "/dev/" --color=never
		echo ""
		if [ "$ASSUME_YES" = "false" ]; then
			echo -n "Are you 100% sure, on selecting [${MMC}] (y/n)?"
			read -r REPLY
			[ "$REPLY" = "y" ] || exit
		fi
		echo ""
	else
		echo ""
		echo "Are you sure? I Don't see [${MMC}], here is what I do see..."
		echo ""
		echo "sudo sfdisk -l:"
		sudo LC_ALL=C sfdisk -l | grep "[Disk] /dev/" --color=never
		if [ "$ASSUME_YES" = "false" ]; then
			echo -n "Are you 100% sure, on selecting [${MMC}] (y/n)? "
			read -r REPLY
			[ "$REPLY" = "y" ] || exit
		fi
		echo ""
		echo "mount:"
		mount | grep -v none | grep "/dev/" --color=never
		echo ""
		exit
	fi
}

# Function to check if machine is valid
check_machine() {
	IN_VALID_MACHINE=1
	if test "-$MACHINE-" = "-igep0020-"; then
		unset IN_VALID_MACHINE
	fi

	if test "-$MACHINE-" = "-igep0030-"; then
 		unset IN_VALID_MACHINE
	fi

	if test "-$MACHINE-" = "-igep0032-"; then
		unset IN_VALID_MACHINE
	fi

	if test "-$MACHINE-" = "-igepam335x-"; then
		unset IN_VALID_MACHINE
	fi

	if test "-$MACHINE-" = "-igep0046-"; then
		unset IN_VALID_MACHINE
	fi

	if [ "$IN_VALID_MACHINE" ]; then
		echo "Error: Invalid machine."
		usage
	fi
}

check_type() {
	IN_VALID_IMAGE_TYPE=1
	if test "-$IMAGE_TYPE-" = "-yocto-"; then
		unset IN_VALID_IMAGE_TYPE
	fi
	if test "-$IMAGE_TYPE-" = "-android-"; then
		unset IN_VALID_IMAGE_TYPE
	fi
	if [ "$IN_VALID_IMAGE_TYPE" ]; then
		echo "Error: Invalid type."
		usage
	fi
}

check_bootloader() {
	IN_VALID_BOOTLOADER=1
	if test "-$BOOTLOADER_TYPE-" = "-uboot-"; then
		unset IN_VALID_BOOTLOADER
	fi
	if test "-$BOOTLOADER_TYPE-" = "-igep-"; then
		unset IN_VALID_BOOTLOADER
	fi
	if test "-$BOOTLOADER_TYPE-" = "-ubootimx-"; then
		unset IN_VALID_BOOTLOADER
	fi
	# Empty
	if test "-$BOOTLOADER_TYPE-" = "--"; then
		unset IN_VALID_BOOTLOADER
	fi
	if [ "$IN_VALID_IMAGE_TYPE" ]; then
		echo "Error: Invalid bootloader type. Options are:"
		echo "    - uboot"
		echo "    - ubootimx"
		echo "    - igep"
		usage
	fi
}

# Function for remove temporary files
cleanup_workdir() {
	sudo rm -fr ${TMPDIR}
}

# Usage help
usage() {
    echo "usage: $(basename $0) --mmc <mmc> --image <filename> --machine <machine>"
cat <<EOF

required options:
--mmc </dev/sdX>
    unformated MMC Card

--image <filename>
    specify file used to create the bootable SD card or HD.

--machine <machine>
    specify the machine. Options are:
        igep0020 - IGEPv2
        igep0030 - IGEP COM MODULE
        igep0032 - IGEP COM PROTON
        igep0033 - IGEP COM AQUILA
        igep0034 - IGEP SMARC AM335x
        igep0046 - IGEP SMARC iMX6

Additional/Optional options:
-h --help
    this help

--bootloader <bootloader type>
    specify the bootloader type. Options are uboot, ubootimx and igep.

--buddy <buddy>
	specify the buddy. E.g.
		none     - Without buddy.
		igep0022 - IGEPv2 expasion board.
		base0010 - IGEP PARIS or IGEP BERLIN.
		ilms0015 - IGEP NEW YORK.
		camr0010 - IGEP CAM BIRD.
	This option adds some tweaks required by the image type

--type <image type>
    specify the image type. Options are yocto, android.
        yocto - <set as default>
        android
    This option adds some tweaks required by the image type

--skip-flashimage
    don't install firmware image for flash

--skip-createini
    copy custom stored igep.ini file instead use create_ini function

--cp-uenv
	copy uEnv.txt file to boot partition (option only available at IGEP AM335x machines)
 
--assume-yes
    assume Yes on all queries <dangerous>

EOF
exit
}

version() {
	echo "$(basename $0) ${__VERSION__}"
cat << EOF

Copyright (C) 2016 - ISEE 2007 SL
License GPLv2: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
EOF
exit
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------

# parse commandline options
while [ ! -z "$1" ]; do
	case $1 in
		-h|--help)
			usage
			;;
		-v|--version)
			version
			;;
		--mmc)
			checkparm $2
			MMC="$2"
			;;
		--image)
			checkparm $2
			IMAGE_FILE="$2"
			;;
		--machine)
			checkparm $2
			MACHINE="$2"
			if [ "$MACHINE" = "igep0033" ] || [ "$MACHINE" = "igep0034" ]; then
				MACHINE="igepam335x"
			fi
			check_machine
			;;
		--bootloader)
			checkparm $2
			BOOTLOADER_TYPE="$2"
			check_bootloader
			;;
		--buddy)
			checkparm $2
			BUDDY="$2"
			;;
		--type)
			checkparm $2
			IMAGE_TYPE="$2"
			check_type
			;;
		--assume-yes)
			ASSUME_YES="true"
			;;
		--skip-flashimage)
			SKIP_FLASHIMAGE="true"
			;;
		--skip-createini)
			SKIP_CREATEINI="true"
			;;
		--cp-uenv)
			CP_UENV="true"
			;;
	esac
	shift
done

# ensure required parameters exists
if [ ! "${MMC}" -o ! "${IMAGE_FILE}" -o ! "${MACHINE}" ]; then
	usage
fi

check_mmc
get_mmcs_by_id
cleanup_sd
create_partitions
echo -n "waiting for partitioning to settle ..."
sync
echo "done."
wait_for_partitions_to_appear
get_mmcs_by_id

if test -z "$MMC1" -o -z "$MMC2"; then
	echo "MMC1: $MMC1 nor MMC2: $MMC2 must be empty"
	exit 2
fi

if test "-$IMAGE_TYPE-" = "-android-"; then
	if test -z "$MMC3"; then
		echo "MMC3: $MMC3 must be empty"
		exit 2
	fi
fi

# If the bootloader type is not specified set the default
if test "-$BOOTLOADER_TYPE-" = "--"; then
	case "$MACHINE" in
		"igep0020" | "igep0030" | "igep0032")
			BOOTLOADER_TYPE="igep"
			;;
		"igepam335x")
			BOOTLOADER_TYPE="uboot"
			;;
		"igep0046")
			BOOTLOADER_TYPE="ubootimx"
			;;
	esac
fi

prepare_partitions

if [ -e "${TMPDIR}" ]; then
    echo "Warning: The ${TMPDIR} directory exist, must be removed!"
    sudo rm -fr ${TMPDIR}
fi

# kernel image and bootloader are extracted from boot directory in the rootfs
# so populate_rootfs should be called before populate_boot
populate_rootfs
# when the rootfs is extracted the kernel image and the bootloader are copied
# to the ${TPMDIR}/binary
populate_boot

# Remove temporary directories
cleanup_workdir

exit 0
